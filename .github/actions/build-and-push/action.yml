name: 'Build and push the Docker image'
description: 'Builds the Docker image and pushes it to the ECR repository.'

inputs:
  ecr-url:
    required: true
  ref:
    required: true
  region:
    required: false
    default: 'eu-west-2'
  role-to-assume:
    description: 'The IAM role ARN to assume for AWS operations.'
    required: true
  build-args:
    required: false
    default: ''
runs:
  using: 'composite'
  steps:
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        aws-region: ${{ inputs.region }}

    - name: Install the ECR credential helper
      run: |
        sudo apt-get update
        sudo apt-get install -y amazon-ecr-credential-helper
      shell: bash

    - name: Configure Docker to use ECR helper
      run: |
        mkdir -p ~/.docker
        REGISTRY_HOST=$(echo "${{ inputs.ecr-url }}" | cut -d'/' -f1)
        echo "Using registry host: $REGISTRY_HOST"
        cat > ~/.docker/config.json <<EOF
        {
          "credHelpers": {
            "$REGISTRY_HOST": "ecr-login"
          }
        }
        EOF
      shell: bash

    - id: extract-build-args
      run: |
        build_args=""
        for arg in ${{ inputs.build-args }}; do
          build_args="$build_args --build-arg $arg"
        done

        echo "::notice::Build arguments extracted: $build_args"
        echo BUILD_ARGS="$build_args" >> "$GITHUB_OUTPUT"
      shell: bash

    - run: |
        # Extract repository name and registry id from ecr-url (assumes format: <account>.dkr.ecr.<region>.amazonaws.com/<repo>)
        REPO_NAME=$(echo "${{ inputs.ecr-url }}" | cut -d'/' -f2)
        REGISTRY_ID=$(echo "${{ inputs.ecr-url }}" | cut -d'.' -f1)
        REF=${{ inputs.ref }}
        IMAGE_NAME="${{ inputs.ecr-url }}:$REF"

        if aws ecr describe-images \
          --repository "$REPO_NAME" \
          --image-ids imageTag="$REF" \
          --region "${{ inputs.region }}" \
          --registry-id "$REGISTRY_ID" > /dev/null 2>&1; then
          echo "::notice::Image $IMAGE_NAME already exists in ECR. Skipping build and push."
          exit 0
        else
          echo "::notice::Image $IMAGE_NAME not found in ECR. Proceeding with build and push."
        fi

        echo "$REF" > REVISION
        docker build -t "$IMAGE_NAME" . ${{ steps.extract-build-args.outputs.BUILD_ARGS }}
        docker push "$IMAGE_NAME"
      shell: bash
